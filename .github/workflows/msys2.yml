name: MSYS2 CI
on: 
  - push
  - pull_request

jobs:
  test:
    strategy:
      fail-fast: false
      # We also run everything on Linux so we have a reference setup which should work.
      matrix:
        include:
          - os: windows-latest
            shell: msys2 {0}
            msystem: ucrt64
            package-prefix: mingw-w64-ucrt-x86_64-
          - os: windows-latest
            shell: msys2 {0}
            msystem: clang32
            package-prefix: mingw-w64-clang-i686-
          - os: windows-latest
            shell: msys2 {0}
            msystem: clang64
            package-prefix: mingw-w64-clang-x86_64-
          - os: windows-latest
            shell: msys2 {0}
            msystem: mingw32
            package-prefix: mingw-w64-i686-
          - os: windows-latest
            shell: msys2 {0}
            msystem: mingw64
            package-prefix: mingw-w64-x86_64-
          - os: windows-latest
            shell: msys2 {0}
            msystem: msys
            package-prefix: ""
          - os: ubuntu-22.04
            shell: bash
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    timeout-minutes: 15
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          # Just fetching 1 commit is not enough for setuptools-scm, so we fetch all
          fetch-depth: 0

      # Windows: Set up MSYS2
      - name: (Windows only) Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
        if: ${{ matrix.os == 'windows-latest' }}

      # Set up Python
      - name: (Linux only) Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
        if: ${{ matrix.os == 'ubuntu-22.04' }}
      - name: (Windows only) Set up Python
        run: pacman --sync --needed --noconfirm ${{ matrix.package-prefix }}{python,python-pip}
        if: ${{ matrix.os == 'windows-latest' }}

      # Print space usage
      - name: Print space usage
        run: df

      # Install "borg via pip" dependencies
      - name: (Linux only) Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libssl-dev libacl1-dev libxxhash-dev liblz4-dev libzstd-dev
        if: ${{ matrix.os == 'ubuntu-22.04' }}
      - name: (Windows only) Install build dependencies
        run: pacman --sync --needed --noconfirm git ${{ matrix.package-prefix }}{toolchain,pkgconf,zstd,lz4,xxhash,openssl,cython,python-setuptools,python-wheel,python-build,python-pkgconfig,python-packaging,python-msgpack}
        if: ${{ matrix.os == 'windows-latest' }}
      - name: (Windows only) Install runtime dependencies
        run: pacman --sync --needed --noconfirm openssh ssh-pageant
        if: ${{ matrix.os == 'windows-latest' }}

      # Print space usage
      - name: Print space usage
        run: df

      # Install "borg via pip" Python dependencies
      - name: Install Python requirements
        run: python -m pip install --upgrade pip setuptools wheel

      # Print space usage
      - name: Print space usage
        run: df

      # Debug output
      - name: Print Python executable paths
        run: |
          which python
          which python3
          which pip
          which pip3
      - name: Print Python version
        run: python --version
      # NOTE: On Windows, "sys.platform" MUST NOT be "win32", as borg does not support ssh repositories there.
      #       On a working MSYS2 setup, it should print "cygwin".
      - name: Print Python platform (should be "cygwin" on Windows)
        run: python -c 'import sys; print(sys.platform)'

      # Install borg from this repository
      - name: Install borg
        run: SETUPTOOLS_USE_DISTUTILS=stdlib pip install .
      - name: Print borg version
        run: borg --version

      # Print space usage
      - name: Print space usage
        run: df

      # Uninstall build dependencies again in order to reduce space usage
      #- name: (Windows only) Uninstall build dependencies
      #  run: pacman -Rs --noconfirm git ${{ matrix.package-prefix }}{toolchain,pkgconf,zstd,lz4,xxhash,openssl,cython,python-setuptools,python-wheel,python-build,python-pkgconfig,python-packaging,python-msgpack}
      #  if: ${{ matrix.os == 'windows-latest' }}

      # Print space usage
      - name: Print space usage
        run: df

      # Test borg
      - name: Create source files
        run: |
          mkdir -p /tmp/source
          dd if=/dev/urandom of=/tmp/source/test.img bs=10000000 count=1
      - name: Create repository directory
        run: mkdir -p /tmp/backup
      - name: Show repository directory
        run: |
          ls -alR /tmp/backup
          du -s /tmp/backup

      - name: borg init
        run: borg init --debug --encryption none /tmp/backup
      - name: borg create
        run: borg create --debug /tmp/backup::test01 /tmp/source
      - name: borg info
        run: borg info --debug /tmp/backup
      - name: borg list
        run: borg list --debug /tmp/backup

      - name: Show repository directory
        run: |
          ls -alR /tmp/backup
          du -s /tmp/backup
